'use strict';

const AWS = require('aws-sdk');

exports.getItemById = async (params, dynamoDbRegion, callback) => {
  if (!params) {
    console.log("You need to set params table");
    callback({
      data: null,
      errors: {
        message: "You need to set params table"
      },
      info: null,
      warnings: null
    });

  } else {
    const dynamoDb = getDynamoDbInstance(dynamoDbRegion);
    await executeGetItemById(params, dynamoDb, (data) => {
      callback(data);
    });
  }
};

async function executeGetItemById(params, dynamoDb, callback) {
  const data = await dynamoDb.getItem(params, function (err, user) {
    if (err) {
      console.log('DynamoDb error');
      console.log(err, err.stack);
      callback({
        data: null,
        errors: {
          message: 'DynamoDb error',
        },
        info: null,
        warnings: null
      });

    } else {
      callback({
        data: {
          user: user
        },
        errors: null,
        info: null,
        warnings: null
      });
    }
  }).promise();
}

exports.addItemById = async (params, dynamoDbRegion, callback) => {
  if (!params) {
    console.log("You need to set params table");
    callback({
      data: null,
      errors: {
        message: "You need to set params table"
      },
      info: null,
      warnings: null
    });

  } else {
    const dynamoDb = getDynamoDbInstance(dynamoDbRegion);
    await executeAddItemById(params, dynamoDb, (isAdded) => {
      callback(isAdded);
    });
  }
};

async function executeAddItemById(params, dynamoDb, callback) {
  const data = await dynamoDb.putItem(params, function (err, data) {
    if (err) {
      console.log('DynamoDb error');
      console.log(err, err.stack);
      callback({
        data: null,
        errors: {
          message: 'DynamoDb error',
        },
        info: null,
        warnings: null
      });

    } else {
      callback({
        data: {
          isAdded: true,
        },
        errors: null,
        info: null,
        warnings: null
      });
    }
  }).promise();
}

exports.deleteItemById = async (params, dynamoDbRegion, callback) => {
  if (!params) {
    console.log("You need to set params table");
    callback({
      data: null,
      errors: {
        message: "You need to set params table"
      },
      info: null,
      warnings: null
    });

  } else {
    const dynamoDb = getDynamoDbInstance(dynamoDbRegion);
    await executeDeleteItemById(params, dynamoDb, (isDeleted) => {
      callback(isDeleted);
    });
  }
};

async function executeDeleteItemById(params, dynamoDb, callback) {
  const data = await dynamoDb.deleteItem(params, function (err, data) {
    if (err) {
      console.log('DynamoDb error');
      console.log(err, err.stack);
      callback({
        data: null,
        errors: {
          message: 'DynamoDb error',
        },
        info: null,
        warnings: null
      });

    } else {
      callback({
        data: {
          isDeleted: true,
        },
        errors: null,
        info: null,
        warnings: null
      });
    }
  }).promise();
}

function getDynamoDbInstance(dynamoDbRegion) {
  return new AWS.DynamoDB({ region: dynamoDbRegion, apiVersion: '2012-08-10' });;
}
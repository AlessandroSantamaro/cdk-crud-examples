"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const apigw = require("@aws-cdk/aws-apigateway");
const dynamodb = require("@aws-cdk/aws-dynamodb");
const AWS = require('aws-sdk');
class CdkCustomerStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Set region
        const dynamoDbRegion = 'eu-west-3';
        AWS.config.region = dynamoDbRegion;
        // Set common layer
        const layer = new lambda.LayerVersion(this, 'CommonsLayer', {
            code: lambda.Code.fromAsset('layer/CommonsLayer'),
            compatibleRuntimes: [lambda.Runtime.NODEJS_12_X],
            license: 'Apache-2.0',
            description: 'A layer to test',
        });
        // Set table
        const table = new dynamodb.Table(this, 'CDK_CUSTOMER', {
            partitionKey: { name: 'username', type: dynamodb.AttributeType.STRING }
        });
        // Define GET api
        const getNodeItem = new lambda.Function(this, 'GetLambdaHandler', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromAsset('lambda'),
            handler: 'get-item.handler',
            layers: [layer],
            environment: {
                dynamoDbRegion,
                USER_TABLE_NAME: table.tableName
            }
        });
        const getApi = new apigw.LambdaRestApi(this, 'user', {
            handler: getNodeItem,
            proxy: false
        });
        const users = getApi.root.addResource('users');
        //users.addMethod('GET');
        const username = users.addResource('{username}');
        username.addMethod('GET'); // GET /users/{username}
        table.grantReadData(getNodeItem);
        // Define PUT api
        const putNodeItem = new lambda.Function(this, 'PutLambdaHandler', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromAsset('lambda'),
            handler: 'put-item.handler',
            layers: [layer],
            environment: {
                dynamoDbRegion,
                USER_TABLE_NAME: table.tableName
            }
        });
        const putApi = new apigw.LambdaRestApi(this, 'add', {
            handler: putNodeItem,
            proxy: false
        });
        const add = putApi.root.addResource('add');
        add.addMethod('POST'); //POST /add
        table.grantFullAccess(putNodeItem);
        // Define DELETE api
        const deleteNodeItem = new lambda.Function(this, 'DeleteLambdaHandler', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromAsset('lambda'),
            handler: 'delete-item.handler',
            layers: [layer],
            environment: {
                dynamoDbRegion,
                USER_TABLE_NAME: table.tableName
            }
        });
        const deleteApi = new apigw.LambdaRestApi(this, 'delete', {
            handler: deleteNodeItem,
            proxy: false
        });
        const deletePath = deleteApi.root.addResource('delete');
        deletePath.addMethod('DELETE');
        const deleteResource = deletePath
            .addResource('{username}')
            .addMethod('DELETE'); // DELETE /delete/{username}
        table.grantFullAccess(deleteNodeItem);
    }
}
exports.CdkCustomerStack = CdkCustomerStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWN1c3RvbWVyLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2RrLWN1c3RvbWVyLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFDO0FBQ3JDLDhDQUE4QztBQUM5QyxpREFBaUQ7QUFDakQsa0RBQWtEO0FBQ2xELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUUvQixNQUFhLGdCQUFpQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQzdDLFlBQVksS0FBYyxFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM1RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixhQUFhO1FBQ2IsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDO1FBQ3ZDLGVBQWU7UUFvQlgsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDO1FBRW5DLE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQzFELElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQztZQUNqRCxrQkFBa0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQ2hELE9BQU8sRUFBRSxZQUFZO1lBQ3JCLFdBQVcsRUFBRSxpQkFBaUI7U0FDL0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDckQsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7U0FDeEUsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxrQkFB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QUFlLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDeEMsQ0FBQztDQUNGO0FBMUdELDRDQTBHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIGFwaWd3IGZyb20gJ0Bhd3MtY2RrL2F3cy1hcGlnYXRld2F5JztcbmltcG9ydCAqIGFzIGR5bmFtb2RiIGZyb20gJ0Bhd3MtY2RrL2F3cy1keW5hbW9kYic7XG5jb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5cbmV4cG9ydCBjbGFzcyBDZGtDdXN0b21lclN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIC8vIFNldCByZWdpb25cbiAgICBjb25zdCBkeW5hbW9EYlJlZ2lvbiA9ICdldS13ZXN0LTMnO1xuLy8gJ2V1LXdlc3QtMSc7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICBBV1MuY29uZmlnLnJlZ2lvbiA9IGR5bmFtb0RiUmVnaW9uO1xuXG4gICAgY29uc3QgbGF5ZXIgPSBuZXcgbGFtYmRhLkxheWVyVmVyc2lvbih0aGlzLCAnQ29tbW9uc0xheWVyJywge1xuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KCdsYXllci9Db21tb25zTGF5ZXInKSxcbiAgICAgIGNvbXBhdGlibGVSdW50aW1lczogW2xhbWJkYS5SdW50aW1lLk5PREVKU18xMl9YXSxcbiAgICAgIGxpY2Vuc2U6ICdBcGFjaGUtMi4wJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnQSBsYXllciB0byB0ZXN0JyxcbiAgICB9KTtcblxuICAgIGNvbnN0IHRhYmxlID0gbmV3IGR5bmFtb2RiLlRhYmxlKHRoaXMsICdDREtfQ1VTVE9NRVInLCB7XG4gICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogJ3VzZXJuYW1lJywgdHlwZTogZHluYW1vZGIuQXR0cmlidXRlVHlwZS5TVFJJTkcgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgZ2V0Tm9kZUl0ZW0gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdHZXRMYW1iZGFIYW5kbGVyJywge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEyX1gsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoJ2xhbWJkYScpLFxuICAgICAgaGFuZGxlcjogJ2dldC1pdGVtLmhhbmRsZXInLFxuICAgICAgbGF5ZXJzOiBbbGF5ZXJdLFxuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgZHluYW1vRGJSZWdpb24sXG4gICAgICAgIFVTRVJfVEFCTEVfTkFNRTogdGFibGUudGFibGVOYW1lXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBnZXRBcGkgPSBuZXcgYXBpZ3cuTGFtYmRhUmVzdEFwaSh0aGlzLCAndXNlcicsIHtcbiAgICAgIGhhbmRsZXI6IGdldE5vZGVJdGVtLFxuICAgICAgcHJveHk6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBjb25zdCB1c2VycyA9IGdldEFwaS5yb290LmFkZFJlc291cmNlKCd1c2VycycpO1xuICAgIC8vdXNlcnMuYWRkTWV0aG9kKCdHRVQnKTtcbiAgICBjb25zdCB1c2VybmFtZSA9IHVzZXJzLmFkZFJlc291cmNlKCd7dXNlcm5hbWV9Jyk7XG4gICAgdXNlcm5hbWUuYWRkTWV0aG9kKCdHRVQnKTsgLy8gR0VUIC91c2Vycy97dXNlcm5hbWV9XG5cbiAgICB0YWJsZS5ncmFudFJlYWREYXRhKGdldE5vZGVJdGVtKTtcblxuICAgIGNvbnN0IHB1dE5vZGVJdGVtID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnUHV0TGFtYmRhSGFuZGxlcicsIHtcbiAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xMl9YLFxuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KCdsYW1iZGEnKSxcbiAgICAgIGhhbmRsZXI6ICdwdXQtaXRlbS5oYW5kbGVyJyxcbiAgICAgIGxheWVyczogW2xheWVyXSxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIGR5bmFtb0RiUmVnaW9uLFxuICAgICAgICBVU0VSX1RBQkxFX05BTUU6IHRhYmxlLnRhYmxlTmFtZVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgcHV0QXBpID0gbmV3IGFwaWd3LkxhbWJkYVJlc3RBcGkodGhpcywgJ2FkZCcsIHtcbiAgICAgIGhhbmRsZXI6IHB1dE5vZGVJdGVtLFxuICAgICAgcHJveHk6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBjb25zdCBhZGQgPSBwdXRBcGkucm9vdC5hZGRSZXNvdXJjZSgnYWRkJyk7XG4gICAgYWRkLmFkZE1ldGhvZCgnUE9TVCcpOyAgLy9QT1NUIC9hZGRcbiAgICB0YWJsZS5ncmFudEZ1bGxBY2Nlc3MocHV0Tm9kZUl0ZW0pO1xuXG4gICAgY29uc3QgZGVsZXRlTm9kZUl0ZW0gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdEZWxldGVMYW1iZGFIYW5kbGVyJywge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEyX1gsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoJ2xhbWJkYScpLFxuICAgICAgaGFuZGxlcjogJ2RlbGV0ZS1pdGVtLmhhbmRsZXInLFxuICAgICAgbGF5ZXJzOiBbbGF5ZXJdLFxuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgZHluYW1vRGJSZWdpb24sXG4gICAgICAgIFVTRVJfVEFCTEVfTkFNRTogdGFibGUudGFibGVOYW1lXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBkZWxldGVBcGkgPSBuZXcgYXBpZ3cuTGFtYmRhUmVzdEFwaSh0aGlzLCAnZGVsZXRlJywge1xuICAgICAgaGFuZGxlcjogZGVsZXRlTm9kZUl0ZW0sXG4gICAgICBwcm94eTogZmFsc2VcbiAgICB9KTtcblxuICAgIGNvbnN0IGRlbGV0ZVBhdGggPSBkZWxldGVBcGkucm9vdC5hZGRSZXNvdXJjZSgnZGVsZXRlJyk7XG4gICAgZGVsZXRlUGF0aC5hZGRNZXRob2QoJ0RFTEVURScpO1xuICAgIGNvbnN0IGRlbGV0ZVJlc291cmNlID0gZGVsZXRlUGF0aFxuICAgICAgLmFkZFJlc291cmNlKCd7dXNlcm5hbWV9JylcbiAgICAgIC5hZGRNZXRob2QoJ0RFTEVURScpOyAvLyBERUxFVEUgL2RlbGV0ZS97dXNlcm5hbWV9XG5cbiAgICB0YWJsZS5ncmFudEZ1bGxBY2Nlc3MoZGVsZXRlTm9kZUl0ZW0pO1xuICB9XG59XG4iXX0=